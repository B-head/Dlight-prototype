<?xml version="1.0" encoding="utf-8" ?>
<!--
Copyright 2014 B_head

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<compile-test xmlns="CompileTestSchema.xsd">
  <case>
    <code>
      <![CDATA[
      var a := 0; var b := 1
      loop a < 1000 {
        a =: stdout
        a + b =: var c
        b =: a
        c =: b
      }
      ]]>
    </code>
    <output>0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</output>
  </case>

  <case>
    <code>
      <![CDATA[
      loop i <= 15 use var i := 1 by i += 1 {
        stdout := if i % 15 = 0 :: "fizzbuzz"
        else if i % 3 = 0 :: "fizz"
        else if i % 5 = 0 :: "buzz"
        else #"{ i }"
      }
      ]]>
    </code>
    <output>1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz</output>
  </case>

  <case>
    <code>
      <![CDATA[
      let max := 50
      var arr := List!Int32
      var index := 0
      loop i < max use i := 2 by i += 1 :: arr.Add(i)
      loop index < arr.Count by index += 1 {
	      var c := arr[index]
	      loop k < arr.Count use k := index + 1 by k += 1 {
		      if arr[k] % c == 0 {
			      arr.RemoveAt[k]
			      k -= 1
		      }
	      }
      }
      loop i < arr.Count use i := 0 by i += 1 :: arr[i] =: stdout
      ]]>
    </code>
    <output>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47</output>
  </case>
  
  <case>
    <code>
      <![CDATA[
      class BlockField {
	      private var field:List!ConsoleColor
	      let width:Int32
	      let height:Int32

	      rout new(w:Int32, h:Int32) {
		      field := List!ConsoleColor()
		      loop i < w * h use i := 0 by i += 1 :: field.Add(ConsoleColor|.White)
		      width := w
		      height := h
	      }

	      rout call(x:Int32, y:Int32) :: field[x + y * width]
	      rout call(x:Int32, y:Int32, value:ConsoleColor) :: field[x + y * width] := value
      }

      var bf := BlockField(10, 24)
      bf[5, 5] := ConsoleColor|.Red
      stdout := bf[5, 5]
      ]]>
    </code>
    <output>Red</output>
  </case>
</compile-test>
