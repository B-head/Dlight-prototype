<?xml version="1.0" encoding="utf-8" ?>
<!--
Copyright 2014 B_head

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<compile-test xmlns="CompileTestSchema.xsd">
  <case>
    <code>
      <![CDATA[
      class A
      {
        var value:Int32
      }

      A() =: var a:A
      a.value := 500
      stdout := a.value
      ]]>
    </code>
    <output>500</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A
      {
        var value:Int32
      }

      A() =: var a
      a.value := 500
      stdout := a.value
      ]]>
    </code>
    <output>500</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class Counter
      {
        var value:Int32
        routine next :: value += 1
      }

      Counter =: var counter
      stdout := counter.next
      stdout := counter.next
      stdout := counter.next
      ]]>
    </code>
    <output>1 2 3</output>
  </case>
  
  <case>
    <code>
      <![CDATA[
      class Counter
      {
        var value := 5
        routine next :: value += 1
      }

      Counter =: var counter
      stdout := counter.next
      stdout := counter.next
      stdout := counter.next
      ]]>
    </code>
    <output>6 7 8</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class Counter
      {
        var a:Int32
        var value := a
        routine next :: value += 1
      }

      Counter =: var counter
      stdout := counter.next
      stdout := counter.next
      stdout := counter.next
      ]]>
    </code>
    <error key="not-constant-expression"/>
  </case>

  <case>
    <code>
      <![CDATA[
      class A {
        routine new {
          x := 3
          y := 6
        }
        
        var x:Int32
        var y:Int32
      }
      
      var a := A
      stdout := a.x * a.y
      ]]>
    </code>
    <output>18</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A {
        routine new(_x:Int32, _y:Int32) {
          x := _x
          y := _y
        }
        
        var x:Int32
        var y:Int32
      }
      
      var a:A := A(4, 7)
      stdout := a.x * a.y
      ]]>
    </code>
    <output>28</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A {
        routine new(_x:Int32, _y:Int32) {
          x := _x
          y := _y
        }
        
        var x:Int32
        var y:Int32
      }
      
      var a := A(4, 7)
      stdout := a.x * a.y
      ]]>
    </code>
    <output>28</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A {
        routine new(x:Int32, y:Int32) {
          this.x := x
          this.y := y
        }
        
        var x:Int32
        var y:Int32
      }
      
      var a := A(5, 8)
      stdout := a.x * a.y
      ]]>
    </code>
    <output>40</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A {
        routine free :: stdout := 10
      }
      rout foo :: var a := A
      
      foo
      GC|.Collect
      ]]>
    </code>
    <output>10</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A
      {
        var a := 10
        static var b := 20
        
        routine foo :: a + 30
        static routine bar :: b + 40
      }

      A =: var o
      stdout := o.a
      stdout := A|.b
      stdout := o.foo
      stdout := A|.bar
      ]]>
    </code>
    <output>10 20 40 60</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A
      {
        var a := 10
        static var b := 20
        
        routine foo :: a + 30
        static routine bar :: b + 40
      }

      A =: var o
      stdout := A|.a
      stdout := o.b
      stdout := A|.foo
      stdout := o.bar
      ]]>
    </code>
    <error key="not-accessable"/>
    <error key="not-accessable"/>
    <error key="not-accessable"/>
    <error key="not-accessable"/>
  </case>

  <case>
    <code>
      <![CDATA[
      class A
      {
        var a := 10
        static var b := 20
        
        routine foo :: a + 30
        static routine bar :: a + 40
      }

      A =: var o
      stdout := o.a
      stdout := A|.b
      stdout := o.foo
      stdout := A|.bar
      ]]>
    </code>
    <error key="not-accessable"/>
  </case>

  <case>
    <code>
      <![CDATA[
      class A
      {
        var a := 10
        static var b := 20
        
        routine foo :: b + 30
        static routine bar :: b + 40
      }

      A =: var o
      stdout := o.a
      stdout := A|.b
      stdout := o.foo
      stdout := A|.bar
      ]]>
    </code>
    <output>10 20 50 60</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A {
	      var a:Int32
	      var b:Int32

	      rout call(a:Int32, b:Int32) {
		      this.a := a
		      this.b := b
	      }
      }

      var o := A
      o := 10, 20
      o.a =: stdout
      o.b =: stdout
      ]]>
    </code>
    <output>10 20</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A {
        var x := 11
        var y := 22
      }
        
      operator +(a:A, b:A) {
        var ret := A
        ret.x := a.x + b.x
        ret.y := a.y + b.y
        return ret
      }
      
      var a := A
      var b := A
      var c := a + b
      stdout := c.x
      stdout := c.y
      ]]>
    </code>
    <output>22 44</output>
  </case>

  <case>
    <code>
      <![CDATA[
      class A
      {
        var value := 11
      }

      class B
      {
        var value := 22
      }
      
      operator B(a:A)
      {
        var ret := B
        ret.value := a.value
        return ret
      }

      var a := A()
      var b:B := a
      stdout := b.value
      ]]>
    </code>
    <output>11</output>
  </case>
</compile-test>
